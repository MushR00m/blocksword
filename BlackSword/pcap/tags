!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARP	protocol.h	/^typedef struct ARP{\/\/0x0608$/;"	s
ARP::dMac	protocol.h	/^	uchar dMac[6];\/\/target hardware address$/;"	m	struct:ARP	access:public
ARP::dpa	protocol.h	/^	ulong dpa;\/\/target protocol address$/;"	m	struct:ARP	access:public
ARP::hardty	protocol.h	/^	ushort hardty;\/\/type of hard$/;"	m	struct:ARP	access:public
ARP::hlen	protocol.h	/^	uchar hlen;\/\/len of hard address$/;"	m	struct:ARP	access:public
ARP::op	protocol.h	/^	ushort op;\/\/arp\/rarp operation$/;"	m	struct:ARP	access:public
ARP::plen	protocol.h	/^	uchar plen;\/\/len of protocol address$/;"	m	struct:ARP	access:public
ARP::proty	protocol.h	/^	ushort proty;\/\/ type of protocol$/;"	m	struct:ARP	access:public
ARP::sMac	protocol.h	/^	uchar sMac[6];\/\/sender hardware address$/;"	m	struct:ARP	access:public
ARP::spa	protocol.h	/^	ulong spa;\/\/sender protocol address$/;"	m	struct:ARP	access:public
EthernetII	protocol.h	/^typedef struct EthernetII{$/;"	s
EthernetII::dMac	protocol.h	/^	uchar dMac[6];\/\/dst hardaddress$/;"	m	struct:EthernetII	access:public
EthernetII::sMac	protocol.h	/^	uchar sMac[6];\/\/src hardaddress$/;"	m	struct:EthernetII	access:public
EthernetII::type	protocol.h	/^	ushort type;\/\/type of protocol$/;"	m	struct:EthernetII	access:public
IP	protocol.h	/^typedef struct IP{\/\/0x0008$/;"	s
IP::chunk	protocol.h	/^	ushort chunk;$/;"	m	struct:IP	access:public
IP::dip	protocol.h	/^	uchar dip[4];$/;"	m	struct:IP	access:public
IP::flag	protocol.h	/^	ushort flag;\/\/ MF ,DF ,offset ,1,1,14$/;"	m	struct:IP	access:public
IP::id	protocol.h	/^	ushort id;\/\/id for parkge$/;"	m	struct:IP	access:public
IP::live	protocol.h	/^	uchar live;$/;"	m	struct:IP	access:public
IP::proty	protocol.h	/^	uchar proty;$/;"	m	struct:IP	access:public
IP::server	protocol.h	/^	uchar server;\/\/type of server$/;"	m	struct:IP	access:public
IP::sip	protocol.h	/^	uchar sip[4];$/;"	m	struct:IP	access:public
IP::total	protocol.h	/^	ushort total;\/\/length of IP parkge$/;"	m	struct:IP	access:public
IP::verhead	protocol.h	/^	uchar verhead;\/\/4bit version ,4bit len for head$/;"	m	struct:IP	access:public
TCP	protocol.h	/^typedef struct TCP{$/;"	s
TCP::chunk	protocol.h	/^	ushort chunk;$/;"	m	struct:TCP	access:public
TCP::confirm	protocol.h	/^	ulong confirm;$/;"	m	struct:TCP	access:public
TCP::dport	protocol.h	/^	ushort dport;$/;"	m	struct:TCP	access:public
TCP::seq	protocol.h	/^	ulong seq;$/;"	m	struct:TCP	access:public
TCP::sport	protocol.h	/^	ushort sport;$/;"	m	struct:TCP	access:public
TCP::urgent	protocol.h	/^	ushort urgent;$/;"	m	struct:TCP	access:public
TCP::wsize	protocol.h	/^	ushort wsize;$/;"	m	struct:TCP	access:public
TCP::xxx	protocol.h	/^	ulong xxx;\/\/4bit doffset,6bit reserved,URG set urgent is vaild,ACK set confirm is vaild,PSH set this packet should send quick,RST set this link is reset,SYN when ack=0 && syn=1 then it's a requiet link packet,FIN set send all data then free link$/;"	m	struct:TCP	access:public
UDP	protocol.h	/^typedef struct UDP{$/;"	s
UDP::check	protocol.h	/^	ushort check;$/;"	m	struct:UDP	access:public
UDP::dport	protocol.h	/^	ushort dport;$/;"	m	struct:UDP	access:public
UDP::len	protocol.h	/^	ushort len;$/;"	m	struct:UDP	access:public
UDP::sport	protocol.h	/^	ushort sport;$/;"	m	struct:UDP	access:public
analysis	bspcap.c	/^void analysis(struct pcap_pkthdr *pkthdr,const u_char *packet){$/;"	f	signature:(struct pcap_pkthdr *pkthdr,const u_char *packet)
arp	protocol.h	/^}arp,*parp;$/;"	t	typeref:struct:ARP
check	protocol.h	/^	ushort check;$/;"	m	struct:UDP	access:public
chunk	protocol.h	/^	ushort chunk;$/;"	m	struct:IP	access:public
chunk	protocol.h	/^	ushort chunk;$/;"	m	struct:TCP	access:public
confirm	protocol.h	/^	ulong confirm;$/;"	m	struct:TCP	access:public
dMac	protocol.h	/^	uchar dMac[6];\/\/dst hardaddress$/;"	m	struct:EthernetII	access:public
dMac	protocol.h	/^	uchar dMac[6];\/\/target hardware address$/;"	m	struct:ARP	access:public
dip	protocol.h	/^	uchar dip[4];$/;"	m	struct:IP	access:public
dpa	protocol.h	/^	ulong dpa;\/\/target protocol address$/;"	m	struct:ARP	access:public
dport	protocol.h	/^	ushort dport;$/;"	m	struct:TCP	access:public
dport	protocol.h	/^	ushort dport;$/;"	m	struct:UDP	access:public
eth	protocol.h	/^}eth,*peth; $/;"	t	typeref:struct:EthernetII
flag	protocol.h	/^	ushort flag;\/\/ MF ,DF ,offset ,1,1,14$/;"	m	struct:IP	access:public
hardty	protocol.h	/^	ushort hardty;\/\/type of hard$/;"	m	struct:ARP	access:public
hlen	protocol.h	/^	uchar hlen;\/\/len of hard address$/;"	m	struct:ARP	access:public
id	protocol.h	/^	ushort id;\/\/id for parkge$/;"	m	struct:IP	access:public
ip	protocol.h	/^}ip,*pip;$/;"	t	typeref:struct:IP
len	protocol.h	/^	ushort len;$/;"	m	struct:UDP	access:public
live	protocol.h	/^	uchar live;$/;"	m	struct:IP	access:public
op	protocol.h	/^	ushort op;\/\/arp\/rarp operation$/;"	m	struct:ARP	access:public
parp	protocol.h	/^}arp,*parp;$/;"	t	typeref:struct:ARP
peth	protocol.h	/^}eth,*peth; $/;"	t	typeref:struct:EthernetII
pip	protocol.h	/^}ip,*pip;$/;"	t	typeref:struct:IP
plen	protocol.h	/^	uchar plen;\/\/len of protocol address$/;"	m	struct:ARP	access:public
proty	protocol.h	/^	uchar proty;$/;"	m	struct:IP	access:public
proty	protocol.h	/^	ushort proty;\/\/ type of protocol$/;"	m	struct:ARP	access:public
ptcp	protocol.h	/^}tcp,*ptcp;$/;"	t	typeref:struct:TCP
pudp	protocol.h	/^}udp,*pudp;$/;"	t	typeref:struct:UDP
sMac	protocol.h	/^	uchar sMac[6];\/\/sender hardware address$/;"	m	struct:ARP	access:public
sMac	protocol.h	/^	uchar sMac[6];\/\/src hardaddress$/;"	m	struct:EthernetII	access:public
seq	protocol.h	/^	ulong seq;$/;"	m	struct:TCP	access:public
server	protocol.h	/^	uchar server;\/\/type of server$/;"	m	struct:IP	access:public
sip	protocol.h	/^	uchar sip[4];$/;"	m	struct:IP	access:public
spa	protocol.h	/^	ulong spa;\/\/sender protocol address$/;"	m	struct:ARP	access:public
sport	protocol.h	/^	ushort sport;$/;"	m	struct:TCP	access:public
sport	protocol.h	/^	ushort sport;$/;"	m	struct:UDP	access:public
tcp	protocol.h	/^}tcp,*ptcp;$/;"	t	typeref:struct:TCP
total	protocol.h	/^	ushort total;\/\/length of IP parkge$/;"	m	struct:IP	access:public
type	protocol.h	/^	ushort type;\/\/type of protocol$/;"	m	struct:EthernetII	access:public
udp	protocol.h	/^}udp,*pudp;$/;"	t	typeref:struct:UDP
urgent	protocol.h	/^	ushort urgent;$/;"	m	struct:TCP	access:public
verhead	protocol.h	/^	uchar verhead;\/\/4bit version ,4bit len for head$/;"	m	struct:IP	access:public
wsize	protocol.h	/^	ushort wsize;$/;"	m	struct:TCP	access:public
xxx	protocol.h	/^	ulong xxx;\/\/4bit doffset,6bit reserved,URG set urgent is vaild,ACK set confirm is vaild,PSH set this packet should send quick,RST set this link is reset,SYN when ack=0 && syn=1 then it's a requiet link packet,FIN set send all data then free link$/;"	m	struct:TCP	access:public
